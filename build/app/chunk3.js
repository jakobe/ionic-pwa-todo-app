/*! Built with http://stenciljs.com */
const{h:t,Context:e}=window.App;class s{constructor(){this.gestureId=0,this.requestedStart=new Map,this.disabledGestures=new Map,this.disabledScroll=new Set,this.capturedId=null}createGesture(t,e,s){return new r(this,this.newID(),t,e,s)}createBlocker(t={}){return new l(this.newID(),this,t.disable,!!t.disableScroll)}newID(){return this.gestureId++}start(t,e,s){return this.canStart(t)?(this.requestedStart.set(e,s),!0):(this.requestedStart.delete(e),!1)}capture(t,e,s){if(!this.start(t,e,s))return!1;const r=this.requestedStart;let l=-1e4;for(const t of r.values())l=Math.max(l,t);return l===s?(this.capturedId=e,this.requestedStart.clear(),!0):(r.delete(e),!1)}release(t){this.requestedStart.delete(t),this.capturedId&&t===this.capturedId&&(this.capturedId=null)}disableGesture(t,e){let s=this.disabledGestures.get(t);s||(s=new Set,this.disabledGestures.set(t,s)),s.add(e)}enableGesture(t,e){const s=this.disabledGestures.get(t);s&&s.delete(e)}disableScroll(t){this.disabledScroll.add(t)}enableScroll(t){this.disabledScroll.delete(t)}canStart(t){return!this.capturedId&&!this.isDisabled(t)}isCaptured(){return!!this.capturedId}isScrollDisabled(){return this.disabledScroll.size>0}isDisabled(t){const e=this.disabledGestures.get(t);return!!(e&&e.size>0)}}class r{constructor(t,e,s,r,l){this.gestureDelegateId=e,this.name=s,this.priority=r,this.disableScroll=l,this.ctrl=t}canStart(){return!!this.ctrl&&this.ctrl.canStart(this.name)}start(){return!!this.ctrl&&this.ctrl.start(this.name,this.gestureDelegateId,this.priority)}capture(){if(!this.ctrl)return!1;const t=this.ctrl.capture(this.name,this.gestureDelegateId,this.priority);return t&&this.disableScroll&&this.ctrl.disableScroll(this.gestureDelegateId),t}release(){this.ctrl&&(this.ctrl.release(this.gestureDelegateId),this.disableScroll&&this.ctrl.enableScroll(this.gestureDelegateId))}destroy(){this.release(),this.ctrl=null}}class l{constructor(t,e,s,r){this.blockerDelegateId=t,this.disable=s,this.disableScroll=r,this.blocked=!1,this.ctrl=e}block(){if(this.ctrl){if(this.disable)for(const t of this.disable)this.ctrl.disableGesture(t,this.blockerDelegateId);this.disableScroll&&this.ctrl.disableScroll(this.blockerDelegateId),this.blocked=!0}}unblock(){if(this.ctrl){if(this.disable)for(const t of this.disable)this.ctrl.enableGesture(t,this.blockerDelegateId);this.disableScroll&&this.ctrl.enableScroll(this.blockerDelegateId),this.blocked=!1}}destroy(){this.unblock(),this.ctrl=null}}const i={disable:["menu-swipe","goback-swipe"],disableScroll:!0};export{s as GestureController,i as BLOCK_ALL};